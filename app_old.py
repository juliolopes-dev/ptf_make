"""
Interface Web Streamlit para ptf_maker
Gerador Profissional de V√≠deos para TikTok/Reels
"""
import streamlit as st
import os
from pathlib import Path
import time
from ptf_maker import config
from ptf_maker.tts import make_tts
from ptf_maker.media import ensure_images
from ptf_maker.render import render_video
from ptf_maker.templates import get_template, list_templates

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="ptf_maker - Gerador de V√≠deos",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS customizado
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        text-align: center;
        background: linear-gradient(90deg, #FFD700, #FFA500);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        padding: 1rem 0;
    }
    .template-card {
        padding: 1rem;
        border-radius: 10px;
        border: 2px solid #ddd;
        margin: 0.5rem 0;
        cursor: pointer;
        transition: all 0.3s;
    }
    .template-card:hover {
        border-color: #FFD700;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }
    .success-box {
        padding: 1rem;
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        color: #155724;
    }
    .stProgress > div > div > div > div {
        background-color: #FFD700;
    }
</style>
""", unsafe_allow_html=True)

# Header
st.markdown('<h1 class="main-header">üé¨ ptf_maker - Gerador de V√≠deos Profissionais</h1>', unsafe_allow_html=True)
st.markdown("### Crie v√≠deos virais para TikTok e Reels em minutos!")

# Sidebar - Templates
st.sidebar.title("üé® Templates Profissionais")
st.sidebar.markdown("Escolha um template otimizado para seu nicho:")

# Informa√ß√µes dos templates com emojis
template_info = {
    "finance": {"emoji": "üí∞", "name": "Finance", "color": "#FFD700", "desc": "Investimentos, Dinheiro"},
    "motivation": {"emoji": "üî•", "name": "Motiva√ß√£o", "color": "#E74C3C", "desc": "Supera√ß√£o, Mindset"},
    "tech": {"emoji": "‚ö°", "name": "Tech", "color": "#3498DB", "desc": "Tecnologia, IA"},
    "business": {"emoji": "üìä", "name": "Business", "color": "#34495E", "desc": "Neg√≥cios, Estrat√©gia"},
    "lifestyle": {"emoji": "‚ú®", "name": "Lifestyle", "color": "#FF6B9D", "desc": "Bem-estar, Vida"},
    "education": {"emoji": "üìö", "name": "Educa√ß√£o", "color": "#2980B9", "desc": "Conhecimento, Ensino"}
}

# Sele√ß√£o de template
selected_template = None
for template_key, info in template_info.items():
    if st.sidebar.button(
        f"{info['emoji']} {info['name']}\n{info['desc']}", 
        key=template_key,
        use_container_width=True
    ):
        selected_template = template_key
        st.session_state.template = template_key

# Manter template selecionado
if 'template' not in st.session_state:
    st.session_state.template = 'finance'

current_template = st.session_state.template
template_data = get_template(current_template)

# Mostrar template selecionado
st.sidebar.markdown("---")
st.sidebar.success(f"‚úÖ Template: **{template_info[current_template]['name']}**")

# Main content - Tabs
tab1, tab2, tab3 = st.tabs(["üìù Criar V√≠deo", "‚öôÔ∏è Configura√ß√µes Avan√ßadas", "üìñ Ajuda"])

with tab1:
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìù Roteiro do V√≠deo")
        
        # Op√ß√£o de input
        input_method = st.radio(
            "Como voc√™ quer fornecer o roteiro?",
            ["Escrever diretamente", "Upload de arquivo"],
            horizontal=True
        )
        
        if input_method == "Escrever diretamente":
            script_text = st.text_area(
                "Digite seu roteiro:",
                height=200,
                placeholder="Gancho: Voc√™ sabia que...\n\nConte√∫do principal...\n\nCall-to-action no final!",
                help="Dica: 15-25 segundos √© ideal. Use frases curtas!"
            )
        else:
            uploaded_file = st.file_uploader(
                "Fa√ßa upload do arquivo de roteiro (.txt)",
                type=['txt']
            )
            if uploaded_file:
                script_text = uploaded_file.read().decode('utf-8')
                st.text_area("Preview do roteiro:", script_text, height=200, disabled=True)
            else:
                script_text = ""
        
        # Contador de caracteres
        if script_text:
            char_count = len(script_text)
            estimated_duration = char_count / 15  # ~15 chars por segundo
            
            col_a, col_b, col_c = st.columns(3)
            col_a.metric("Caracteres", char_count)
            col_b.metric("Dura√ß√£o estimada", f"{estimated_duration:.1f}s")
            
            if 10 <= estimated_duration <= 30:
                col_c.success("‚úÖ Dura√ß√£o ideal!")
            elif estimated_duration < 10:
                col_c.warning("‚ö†Ô∏è Muito curto")
            else:
                col_c.error("‚ùå Muito longo")
    
    with col2:
        st.subheader("üé® Template Selecionado")
        
        info = template_info[current_template]
        st.markdown(f"""
        <div style='padding: 1rem; background-color: {info['color']}22; border-radius: 10px; border-left: 4px solid {info['color']}'>
            <h2 style='margin: 0;'>{info['emoji']} {info['name']}</h2>
            <p style='margin: 0.5rem 0;'>{info['desc']}</p>
            <p style='margin: 0; font-size: 0.9rem; opacity: 0.8;'>
                Cor: {template_data['primary_color']}<br>
                Efeitos: {'‚úÖ' if template_data['effects']['ken_burns'] else '‚ùå'} Zoom | 
                {'‚úÖ' if template_data['effects']['transitions'] else '‚ùå'} Transi√ß√µes
            </p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        # N√∫mero de imagens
        num_images = st.slider(
            "üñºÔ∏è N√∫mero de imagens",
            min_value=3,
            max_value=8,
            value=5,
            help="Mais imagens = v√≠deo mais din√¢mico"
        )
        
        # Anima√ß√£o
        animation_type = st.selectbox(
            "‚ú® Anima√ß√£o das legendas",
            ["fade", "zoom", "slide"],
            index=0,
            help="Fade = Suave | Zoom = Impacto | Slide = Din√¢mico"
        )

    st.markdown("---")
    
    # M√∫sica (opcional)
    st.subheader("üéµ M√∫sica de Fundo (Opcional)")
    
    col_music1, col_music2 = st.columns([3, 1])
    
    with col_music1:
        music_file = st.file_uploader(
            "Upload de m√∫sica MP3",
            type=['mp3'],
            help="M√∫sicas instrumentais funcionam melhor. Requer Python 3.10-3.12"
        )
    
    with col_music2:
        if music_file:
            music_volume = st.slider(
                "Volume (%)",
                min_value=5,
                max_value=50,
                value=15,
                help="15-20% √© ideal"
            )
        else:
            music_volume = 15
            st.info("Sem m√∫sica")
    
    st.markdown("---")
    
    # Bot√£o de gerar
    col_btn1, col_btn2, col_btn3 = st.columns([1, 2, 1])
    
    with col_btn2:
        generate_button = st.button(
            "üöÄ GERAR V√çDEO PROFISSIONAL",
            type="primary",
            use_container_width=True,
            disabled=not script_text
        )
    
    # Gera√ß√£o do v√≠deo
    if generate_button and script_text:
        try:
            # Preparar diret√≥rios
            config.OUT_DIR.mkdir(exist_ok=True)
            config.ASSETS_DIR.mkdir(exist_ok=True)
            
            # Progress bar
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            # 1. TTS
            status_text.text("üé§ Gerando √°udio TTS...")
            progress_bar.progress(20)
            
            audio_path = config.OUT_DIR / "audio.mp3"
            make_tts(script_text, str(audio_path), template_data.get('voice', 'pt-BR-AntonioNeural'))
            
            # 2. M√∫sica (se fornecida)
            if music_file:
                status_text.text("üéµ Processando m√∫sica...")
                progress_bar.progress(30)
                
                music_path = config.ASSETS_DIR / "temp_music.mp3"
                with open(music_path, 'wb') as f:
                    f.write(music_file.getbuffer())
                
                try:
                    from ptf_maker.audio_mixer import mix_audio_with_music
                    mixed_audio_path = config.OUT_DIR / "audio_mixed.mp3"
                    mix_audio_with_music(
                        str(audio_path),
                        str(music_path),
                        str(mixed_audio_path),
                        music_volume / 100
                    )
                    audio_path = mixed_audio_path
                    st.success("‚úÖ M√∫sica mixada!")
                except ImportError:
                    st.warning("‚ö†Ô∏è Mixagem de √°udio n√£o dispon√≠vel (Python 3.13+). Continuando sem m√∫sica...")
            
            # 3. Imagens
            status_text.text("üñºÔ∏è Baixando imagens do Pexels...")
            progress_bar.progress(50)
            
            image_paths = ensure_images(
                n=num_images,
                topic=template_data['topic'],
                key=config.PEXELS_KEY,
                force_local=not config.PEXELS_KEY
            )
            
            # 4. Renderiza√ß√£o
            status_text.text("üé• Renderizando v√≠deo com efeitos profissionais...")
            progress_bar.progress(70)
            
            video_path = config.OUT_DIR / "video.mp4"
            
            effects_config = {
                "ken_burns": template_data['effects']['ken_burns'],
                "transitions": template_data['effects']['transitions'],
                "text_animation": animation_type
            }
            
            render_video(
                bg_paths=image_paths,
                audio_mp3=str(audio_path),
                script_text=script_text,
                out_path=str(video_path),
                title=template_data['title'],
                primary_color=template_data['primary_color'],
                font=template_data['font'],
                font_size=template_data['font_size'],
                effects_config=effects_config
            )
            
            progress_bar.progress(100)
            status_text.text("‚úÖ V√≠deo gerado com sucesso!")
            
            # Mostrar resultado
            st.markdown("---")
            st.success("### üéâ V√≠deo Pronto!")
            
            # Preview do v√≠deo
            st.video(str(video_path))
            
            # Informa√ß√µes do v√≠deo
            video_size = video_path.stat().st_size / (1024 * 1024)  # MB
            
            col_info1, col_info2, col_info3 = st.columns(3)
            col_info1.metric("Tamanho", f"{video_size:.1f} MB")
            col_info2.metric("Resolu√ß√£o", "1080√ó1920")
            col_info3.metric("FPS", "30")
            
            # Download
            with open(video_path, 'rb') as f:
                st.download_button(
                    "‚¨áÔ∏è BAIXAR V√çDEO MP4",
                    f,
                    file_name="video_profissional.mp4",
                    mime="video/mp4",
                    use_container_width=True
                )
            
            # Tamb√©m baixar √°udio
            with open(audio_path, 'rb') as f:
                st.download_button(
                    "‚¨áÔ∏è Baixar √Åudio MP3",
                    f,
                    file_name="audio.mp3",
                    mime="audio/mp3",
                    use_container_width=True
                )
            
        except Exception as e:
            st.error(f"‚ùå Erro ao gerar v√≠deo: {str(e)}")
            st.exception(e)

with tab2:
    st.subheader("‚öôÔ∏è Configura√ß√µes Avan√ßadas")
    
    col_adv1, col_adv2 = st.columns(2)
    
    with col_adv1:
        st.markdown("### üé® Personaliza√ß√£o Visual")
        
        custom_title = st.text_input(
            "T√≠tulo customizado",
            value=template_data['title'],
            help="Aparece nos primeiros 2.5s"
        )
        
        custom_color = st.color_picker(
            "Cor prim√°ria",
            value=template_data['primary_color'],
            help="Cor do t√≠tulo e destaques"
        )
        
        font_size = st.slider(
            "Tamanho da fonte",
            min_value=40,
            max_value=80,
            value=template_data['font_size']
        )
    
    with col_adv2:
        st.markdown("### üé¨ Efeitos Visuais")
        
        enable_ken_burns = st.checkbox(
            "Efeito Ken Burns (zoom)",
            value=True,
            help="Zoom gradual nas imagens"
        )
        
        enable_transitions = st.checkbox(
            "Transi√ß√µes suaves",
            value=True,
            help="Fade in/out entre imagens"
        )
        
        custom_topic = st.text_input(
            "T√≥pico de busca Pexels",
            value=template_data['topic'],
            help="Palavras-chave para buscar imagens"
        )
    
    st.info("üí° **Dica:** Altera√ß√µes aqui sobrescrevem as configura√ß√µes do template selecionado.")

with tab3:
    st.subheader("üìñ Como Usar")
    
    st.markdown("""
    ## üöÄ Guia R√°pido
    
    ### 1. Escolha um Template
    Na barra lateral, selecione o template que combina com seu nicho:
    - **üí∞ Finance** - Investimentos, dinheiro
    - **üî• Motiva√ß√£o** - Supera√ß√£o, mindset (mais viral!)
    - **‚ö° Tech** - Tecnologia, IA
    - **üìä Business** - Neg√≥cios, estrat√©gia
    
    ### 2. Escreva o Roteiro
    - **15-25 segundos** √© ideal
    - Comece com um **gancho forte**
    - Use **frases curtas**
    - Termine com **call-to-action**
    
    ### 3. Adicione M√∫sica (Opcional)
    - M√∫sicas **instrumentais** funcionam melhor
    - Volume **15-20%** √© ideal
    - Fontes: [Pixabay](https://pixabay.com/music/), [YouTube Audio Library](https://studio.youtube.com/channel/UC/music)
    
    ### 4. Gere e Baixe
    - Clique em **"Gerar V√≠deo"**
    - Aguarde ~2-3 minutos
    - **Preview** antes de baixar
    - Download direto em **MP4**
    
    ---
    
    ## üí° Dicas para V√≠deos Virais
    
    ### Roteiro:
    ‚úÖ Gancho impactante nos primeiros 3s  
    ‚úÖ Use n√∫meros e dados concretos  
    ‚úÖ Quebre em frases de 38 caracteres  
    ‚úÖ Call-to-action claro no final  
    
    ### Visual:
    ‚úÖ 4-6 imagens de alta qualidade  
    ‚úÖ Template matching com nicho  
    ‚úÖ Cores vibrantes chamam aten√ß√£o  
    
    ### Publica√ß√£o:
    ‚úÖ Hor√°rios de pico (19h-22h)  
    ‚úÖ 5-7 hashtags relevantes  
    ‚úÖ Responda coment√°rios nas primeiras 2h  
    
    ---
    
    ## ‚ùì FAQ
    
    **P: Quanto tempo leva para gerar?**  
    R: 2-3 minutos em m√©dia (depende da quantidade de imagens)
    
    **P: Preciso de chave Pexels?**  
    R: N√£o obrigat√≥rio, mas recomendado para mais variedade de imagens
    
    **P: M√∫sica n√£o funciona?**  
    R: Requer Python 3.10-3.12. Com Python 3.13+ funciona sem m√∫sica
    
    **P: Posso usar comercialmente?**  
    R: Sim! Imagens do Pexels s√£o livres para uso comercial
    
    ---
    
    ## üîó Links √öteis
    
    - [Documenta√ß√£o Completa](./PROFISSIONAL.md)
    - [Exemplos de Roteiros](./exemplos/)
    - [GitHub](https://github.com)
    """)

# Footer
st.markdown("---")
st.markdown(
    "<div style='text-align: center; color: #888;'>Feito com ‚ù§Ô∏è por ptf_maker | "
    "Vers√£o Profissional com Efeitos Cinematogr√°ficos</div>",
    unsafe_allow_html=True
)
